open Stdune;;
open Dune;;
open Fiber.O;;

#warnings "-40";;

let printf = Printf.printf;;

let () =
  Path.set_root (Path.External.cwd ());
  Path.set_build_dir (Path.Kind.of_string "_build")
;;

let temp_dir = Path.of_string "vcs-tests";;
let () = at_exit (fun () -> Path.rm_rf temp_dir);;

(* When hg is not available, we test with git twice indeed. This is
   because many people don't have hg installed. *)
let has_hg =
  match Lazy.force Vcs.hg with
  | (_ : Path.t) -> true
  | exception _ -> false

let run (vcs : Vcs.t) args =
  let prog, prog_str, real_args =
    match vcs.kind with
    | Git -> Vcs.git, "git", args
    | Hg ->
      if has_hg then
        Vcs.hg, "hg", args
      else
        Vcs.git, "hg",
        match args with
        | ["tag"; s; "-u"; _] -> ["tag"; "-a"; s; "-m"; s]
        | ["commit"; "-m"; msg; "-u"; _] -> ["commit"; "-m"; msg]
        | _ -> args
  in
  printf "$ %s\n" (List.map (prog_str :: args) ~f:Import.quote_for_shell
               |> String.concat ~sep:" ");
  Process.run Strict (Lazy.force prog) real_args
    ~env:Env.initial ~dir:vcs.root
    ~stdout_to:(Process.Output.file Config.dev_null)
;;

type action =
  | Init
  | Add of string
  | Write of string * string
  | Commit
  | Tag of string
  | Describe of string

let run_action (vcs : Vcs.t) action =
  match action with
  | Init -> run vcs ["init"]
  | Add fn -> run vcs ["add"; fn]
  | Commit -> begin
      match vcs.kind with
      | Git -> run vcs ["commit"; "-m"; "commit message"]
      | Hg -> run vcs ["commit"; "-m"; "commit message"; "-u"; "toto"]
    end
  | Write (fn, s) ->
    printf "$ echo %S > %s\n" s fn;
    Io.write_file (Path.relative temp_dir fn) s;
    Fiber.return ()
  | Describe expected ->
    printf "$ %s describe [...]\n"
      (match vcs.kind with
       | Git -> "git"
       | Hg -> "hg");
    Memo.reset ();
    let vcs =
      match vcs.kind with
      | Hg when not has_hg -> { vcs with kind = Git }
      | _ -> vcs
    in
    Vcs.describe vcs >>| fun s ->
    let processed =
      String.split s ~on:'-'
      |> List.map ~f:(fun s ->
        match s with
        | "" | "dirty" -> s
        | s when String.length s = 1 &&
                 String.for_all s ~f:(function
                   | '0'..'9' -> true
                   | _ -> false) -> s
        | _ when String.for_all s ~f:(function
          | '0'..'9' | 'a'..'z' -> true
          | _ -> false) ->
          "<commit-id>"
        | _ -> s)
      |> String.concat ~sep:"-"
    in
    printf "%s\n" processed;
    if processed <> expected then
      printf "Expected: %s\n\
              Original: %s\n" expected s;
    printf "\n"
  | Tag s ->
    match vcs.kind with
    | Git -> run vcs ["tag"; "-a"; s; "-m"; s]
    | Hg -> run vcs ["tag"; s; "-u"; "toto"]

let run kind script =
  Path.rm_rf temp_dir;
  Path.mkdir_p temp_dir;
  let vcs = { Vcs.kind; root = temp_dir } in
  Scheduler.go (fun () ->
    Fiber.map_all_unit script ~f:(run_action vcs))
;;

let script =
  [ Init
  ; Write ("a", "-")
  ; Add "a"
  ; Commit
  ; Describe "<commit-id>"

  ; Write ("b", "-")
  ; Add "b"
  ; Describe "<commit-id>-dirty"

  ; Commit
  ; Describe "<commit-id>"

  ; Tag "1.0"
  ; Describe "1.0"

  ; Write ("c", "-")
  ; Add "c"
  ; Describe "1.0-dirty"

  ; Commit
  ; Describe "1.0-1-<commit-id>"

  ; Write ("d", "-")
  ; Add "d"
  ; Describe "1.0-1-<commit-id>-dirty"

  ; Commit
  ; Describe "1.0-2-<commit-id>"
  ]
;;

[%%ignore]

run Git script;;

[%%expect{|
$ git init
$ echo "-" > a
$ git add a
$ git commit -m 'commit message'
$ git describe [...]
<commit-id>

$ echo "-" > b
$ git add b
$ git describe [...]
<commit-id>-dirty

$ git commit -m 'commit message'
$ git describe [...]
<commit-id>

$ git tag -a 1.0 -m 1.0
$ git describe [...]
1.0

$ echo "-" > c
$ git add c
$ git describe [...]
1.0-dirty

$ git commit -m 'commit message'
$ git describe [...]
1.0-1-<commit-id>

$ echo "-" > d
$ git add d
$ git describe [...]
1.0-1-<commit-id>-dirty

$ git commit -m 'commit message'
$ git describe [...]
1.0-2-<commit-id>

- : unit = ()
|}]

run Hg script;;

[%%expect{|
$ hg init
$ echo "-" > a
$ hg add a
$ hg commit -m 'commit message' -u toto
$ hg describe [...]
<commit-id>

$ echo "-" > b
$ hg add b
$ hg describe [...]
<commit-id>-dirty

$ hg commit -m 'commit message' -u toto
$ hg describe [...]
<commit-id>

$ hg tag 1.0 -u toto
$ hg describe [...]
1.0

$ echo "-" > c
$ hg add c
$ hg describe [...]
1.0-dirty

$ hg commit -m 'commit message' -u toto
$ hg describe [...]
1.0-1-<commit-id>

$ echo "-" > d
$ hg add d
$ hg describe [...]
1.0-1-<commit-id>-dirty

$ hg commit -m 'commit message' -u toto
$ hg describe [...]
1.0-2-<commit-id>

- : unit = ()
|}]
